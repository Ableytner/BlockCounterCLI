using BlockCounterCLI.helper;
using BlockCounterCLI.helpers;
using BlockCounterCLI.program;
using Python.Runtime;
using System;
using System.Diagnostics;
using System.IO;
using System.Text.Json.Nodes;
using System.Threading;

namespace BlockCounterCLI.command
{
    internal class GetOldMappings : BaseCommand
    {
        public static new string Prefix = "old-mappings";
        public static new string Description = "generate the blockid to name mappings for mc version 1.7.10";

        public GetOldMappings(string[] args) { }

        public override void Execute()
        {
            PythonProgram python = ProgramRegistry.Instance.GetProgram(typeof(PythonProgram));
            JavaProgram java = ProgramRegistry.Instance.GetProgram(typeof(JavaProgram));
            McServerWrapperProgram mcServerWrapper = ProgramRegistry.Instance.GetProgram(typeof(McServerWrapperProgram));
            PrismProgram prism = ProgramRegistry.Instance.GetProgram(typeof(PrismProgram));

            python.EnsureIsSetup();
            java.EnsureIsSetup();
            mcServerWrapper.EnsureIsSetup();
            prism.EnsureIsSetup();

            StartServer();

            Process client = StartClient();

            WaitForClientConnect();

            Thread.Sleep(1000);

            CopyMappings();

            StopServer();
            StopClient(client);
        }

        private void StartServer()
        {
            JavaProgram java = ProgramRegistry.Instance.GetProgram(typeof(JavaProgram));
            McServerWrapperProgram mcServerWrapper = ProgramRegistry.Instance.GetProgram(typeof(McServerWrapperProgram));

            using (Py.GIL())
            {
                PyModule scope = mcServerWrapper.session;

                // set working dorectory
                scope.Exec("import os");
                scope.Set("workdir", Path.GetDirectoryName(mcServerWrapper.serverJar));
                scope.Exec("os.chdir(workdir)");

                scope.Exec("from mcserverwrapper import Wrapper");
                scope.Set("jar_file", mcServerWrapper.serverJar);
                scope.Set("start_cmd", $"{java.java8Executable} -Xmx4G -Xms4G -jar {mcServerWrapper.serverJar} nogui");
                scope.Exec("props = {\"port\": 53245, \"onli\": \"false\"}");
                scope.Exec("wrapper = Wrapper(jarfile_path=jar_file, server_start_command=start_cmd, server_property_args=props, print_output=False)");
                scope.Exec("wrapper.startup()");
            }
        }

        private Process StartClient()
        {
            PrismProgram prism = ProgramRegistry.Instance.GetProgram(typeof(PrismProgram));

            Process pProcess = ProcessHelper.StartProcess("cmd.exe", $"/c \"{prism.prismExecutable} --launch Forge1.7.10template\"");

            // one minute from now
            /*DateTime maxTime = DateTime.Now + new TimeSpan(0, 1, 0);
            while (DateTime.Now < maxTime)
            {
                Thread.Sleep(1000);
            }*/

            return pProcess;
        }

        private void WaitForClientConnect()
        {
            McServerWrapperProgram mcServerWrapper = ProgramRegistry.Instance.GetProgram(typeof(McServerWrapperProgram));

            using (Py.GIL())
            {
                PyModule scope = mcServerWrapper.session;

                bool playerConnected = false;
                while (!playerConnected)
                {
                    scope.Exec("line = wrapper.output_queue.get()");
                    PyObject line = scope.Get("line") ?? throw new Exception();
                    if (line.ToString().Contains("Developer joined the game"))
                    {
                        playerConnected = true;
                    }
                }
            }

            if (CLI.IsDebugMode)
            {
                Console.WriteLine("Client connected");
            }
        }

        private void CopyMappings()
        {
            string mappingsPath = Path.Combine(FileHelper.GetProgramsPath("Prism"), "instances", "Forge1.7.10template", ".minecraft", "blockid_to_name.json");
            string newMappingsPath = Path.Combine(FileHelper.GetProgramsPath(), "mappings.json");

            FileHelper.CopyFile(mappingsPath, newMappingsPath);

            string jsonContent = File.ReadAllText(newMappingsPath);
            if (!IsValidJSON(jsonContent))
            {
                throw new Exception("Invalid JSON mappings generated by client");
            }
        }

        // code from here:
        // https://stackoverflow.com/a/14977915/15436169
        private static bool IsValidJSON(string jsonString)
        {
            try
            {
                var tmpObj = JsonValue.Parse(jsonString);
                return tmpObj is not null;
            }
            catch (FormatException)
            {
                //Invalid json format
                return false;
            }
            catch (Exception) //some other exception
            {
                return false;
            }
        }

        private void StopServer()
        {
            McServerWrapperProgram mcServerWrapper = ProgramRegistry.Instance.GetProgram(typeof(McServerWrapperProgram));

            using (Py.GIL())
            {
                PyModule scope = mcServerWrapper.session;

                scope.Exec("wrapper.stop()");

            }
        }

        private void StopClient(Process client)
        {
            client.Kill(true);
        }
    }
}
